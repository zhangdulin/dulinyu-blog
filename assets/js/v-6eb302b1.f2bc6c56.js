"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7170],{8889:(a,t,e)=>{e.r(t),e.d(t,{data:()=>i});const i={key:"v-6eb302b1",path:"/javaScript/GoogleV8/list/p2.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"V8是如何执行一段JavaScript代码的？",slug:"v8是如何执行一段javascript代码的",children:[]}],filePathRelative:"javaScript/GoogleV8/list/p2.md",git:{updatedTime:1667285434e3,contributors:[]}}},2921:(a,t,e)=>{e.r(t),e.d(t,{default:()=>s});var i=e(6252);const r=e.p+"assets/img/8a34ae8c1a7a0f87e19b1384a025e354.f0648bb6.jpg",l=(0,i._)("h2",{id:"v8是如何执行一段javascript代码的",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#v8是如何执行一段javascript代码的","aria-hidden":"true"},"#"),(0,i.Uk)(" V8是如何执行一段JavaScript代码的？")],-1),c=(0,i._)("p",null,[(0,i._)("img",{src:r,alt:"V8 执行 JavaScript ",title:"V8 执行 JavaScript "}),(0,i.Uk)(" 理解了这一点，我们就可以来深入分析 V8 执行一段 JavaScript 代码所经历的主要流程了， 这包括了： 初始化基础环境； 解析源码生成 AST 和作用域； 依据 AST 和作用域生成字节码； 解释执行字节码； 监听热点代码； 优化热点代码为二进制的机器代码； 反优化生成的二进制机器代码。 这里你需要注意的是，JavaScript 是一门动态语言，在运行过程中，某些被优化的结构可能会被 V8 动态修改了，这会导致之前被优化的代码失效，如果某块优化之后的代码失效了，那么编译器需要执行反优化操作。")],-1),p={},s=(0,e(3744).Z)(p,[["render",function(a,t){const e=(0,i.up)("Gitalk");return(0,i.wg)(),(0,i.iD)(i.HY,null,[l,c,(0,i.Wm)(e)],64)}]])}}]);