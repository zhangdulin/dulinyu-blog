"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2158],{1320:(e,a,t)=>{t.r(a),t.d(a,{data:()=>r});const r={key:"v-1293dbb6",path:"/javaScript/learn/list/p6.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"重学javaScript表达式，类型转换",slug:"重学javascript表达式-类型转换",children:[{level:3,title:"字符float number 内存布局",slug:"字符float-number-内存布局",children:[]},{level:3,title:"Express",slug:"express",children:[]}]}],filePathRelative:"javaScript/learn/list/p6.md",git:{updatedTime:1668406078e3,contributors:[]}}},3377:(e,a,t)=>{t.r(a),t.d(a,{default:()=>f});var r=t(6252),n=t(3577),i=t(9963);const o=t.p+"assets/img/Dingtalk_20220725140650.0cefeff7.png",l=(0,r._)("h2",{id:"重学javascript表达式-类型转换",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#重学javascript表达式-类型转换","aria-hidden":"true"},"#"),(0,r.Uk)(" 重学javaScript表达式，类型转换")],-1),d=(0,r._)("h3",{id:"字符float-number-内存布局",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#字符float-number-内存布局","aria-hidden":"true"},"#"),(0,r.Uk)(" 字符float number 内存布局")],-1),h=(0,r._)("p",null,"https://jsfiddle.net/pLh8qeor/19/",-1),s={id:"app"},u=["onUpdate:modelValue"],p={key:0},c={key:1},b=(0,r._)("br",null,null,-1),g=(0,r.uE)('<p>input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { -webkit-appearance: none; } .container input[type=&#39;number&#39;]{ -moz-appearance: textfield; } span { padding:0; margin:0; } input { width:1em; height:2em; text-align:center; } .sign { background-color: lightblue; } .exponent { background-color: orange; }</p><p>window.vm = new Vue({ el: &#39;#app&#39;, data: { bits: Array(65).join(0).split(&quot;&quot;).map(v =&gt; Number(v)), value: 0 }, watch: { value(val){ const bytes = new Uint8Array(8); const memory = new Float64Array(bytes.buffer); memory[0] = (val); console.log(&quot;******&quot;); for(var i = 0; i &lt; 8; i++) { var byte = bytes[i] console.log(byte); for(var j = 0; j &lt; 8; j ++) { this.bits[(8 - i) * 8 - j - 1] = byte &amp; 1; byte = byte &gt;&gt; 1; } } } } })</p><h3 id="express" tabindex="-1"><a class="header-anchor" href="#express" aria-hidden="true">#</a> Express</h3><h4 id="atom" tabindex="-1"><a class="header-anchor" href="#atom" aria-hidden="true">#</a> Atom</h4><h4 id="grammar" tabindex="-1"><a class="header-anchor" href="#grammar" aria-hidden="true">#</a> Grammar</h4><ol><li>Tress vs Priority . +- */ ()</li></ol><h4 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions" aria-hidden="true">#</a> Expressions</h4><ol><li>menber a.b a[b] foo<code>string</code> super.b super[&#39;b&#39;] new.target ner Foo()</li><li>New ner Foo new a()() new new a()</li></ol><h4 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h4><p>. Object . key . delete . assign</p><h4 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> call</h4><p>foo() super() foo()[&#39;b&#39;] foo().b foo()<code>A</code></p><h4 id="left-handside-right-handside" tabindex="-1"><a class="header-anchor" href="#left-handside-right-handside" aria-hidden="true">#</a> Left Handside &amp; Right Handside</h4><p>A.B =C a+b=c</p><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h4><p>a++ a-- --a ++a</p><p>不能有换行 a ++</p><h4 id="unary-单步运算" tabindex="-1"><a class="header-anchor" href="#unary-单步运算" aria-hidden="true">#</a> Unary 单步运算</h4><p>delete a.b void foo() (变成undefined; IIFE, 建议用) typeof a +a -a ~a 按位取反 !a 非 await a</p><p>IIFE void function(i){}(i)</p><h4 id="原算符" tabindex="-1"><a class="header-anchor" href="#原算符" aria-hidden="true">#</a> 原算符</h4><p>Exponental ** 3<strong>2</strong>3 3**(2**3)</p><p>Multiplicative +/% Additive +- Shift &lt;&lt; &gt;&gt; &gt;&gt;&gt; Relationship &lt;&gt; &lt;= &gt;= instanceof in Equality == != === !== Bitwise &amp; ^ | 位运算 Logical &amp;&amp; || Conditional ?: <img src="'+o+'" alt="Conditional!" title="Conditional"></p><h4 id="boxing-unboxing-拆箱装箱" tabindex="-1"><a class="header-anchor" href="#boxing-unboxing-拆箱装箱" aria-hidden="true">#</a> Boxing &amp; Unboxing 拆箱装箱</h4><p>ToPremitive toString vs valueOf</p><p>装箱 new String(1) new Number(1) new Booble() new Object() Symbol()</p><p>拆箱 1+{} // &quot;1[object Object] 1+ {valueOf(){return 2}} //3 1+ {toSting(){return 2}} //3</p><p>1+ {toSting(){return &#39;2&#39;}} //12 1+ {valueOf(){return 1}, toSting(){return &#39;2&#39;}} //2 &#39;1&#39;+ {valueOf(){return 1}, toSting(){return &#39;2&#39;}} //11</p><p>Symbol.toPrimitive //Symbol[Symbol.toPrimitive] 1+ {Symbol.toPrimitive(){return 6}, valueOf(){return 1}, toSting(){return &#39;2&#39;}} //7 1+ {Symbol.toPrimitive(){return {}}, valueOf(){return 1}, toSting(){return &#39;2&#39;}} //报错 1+ {valueOf(){return {}}, toSting(){return &#39;2&#39;}} //12 不报错</p><h4 id="stringtonumber" tabindex="-1"><a class="header-anchor" href="#stringtonumber" aria-hidden="true">#</a> StringToNumber</h4><p>function converStringToNumber(string, x) { if(argument.length &lt;2) x=10;</p><p>var chars = string.split(&#39;&#39;); var number = 0; var i =0; while(i&lt;chars.length &amp;&amp; chars[i]!=&#39;.&#39;) { number = number * x; number +=chars[i].codePointAt(0) - &#39;0&#39;.codePointAt(0); i++ } if(chars[i]==&#39;.&#39;) { i++ } var fraction = 1 while(i&lt;chars.length) { fraction = fraction / x; number +=(chars[i].codePointAt(0) - &#39;0&#39;.codePointAt(0))*fraction; i++ }</p><p>return number; }</p><h4 id="numbertostring" tabindex="-1"><a class="header-anchor" href="#numbertostring" aria-hidden="true">#</a> NumberToString</h4><p>function converNumberToString(number, x) { var integer = Math.floor(number) var fraction = number - integer var string = &#39;&#39; while (integer&gt; 0) { string = String(integer%x) + string integer = Math.floor(integer/x) }</p><p>return string; }</p><h4 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例" aria-hidden="true">#</a> 测试用例</h4><p>test262</p>',38),m={},f=(0,t(3744).Z)(m,[["render",function(e,a){const t=(0,r.up)("Gitalk");return(0,r.wg)(),(0,r.iD)(r.HY,null,[l,d,h,(0,r._)("div",s,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(e.bits,((a,t)=>((0,r.wg)(),(0,r.iD)("span",null,[(0,r.wy)((0,r._)("input",{class:(0,n.C_)(t>0?t>11?"fraction":"exponent":"sign"),type:"number",min:"0",max:"1","onUpdate:modelValue":a=>e.bits[t]=a},null,10,u),[[i.nr,e.bits[t]]]),31==t?((0,r.wg)(),(0,r.iD)("input",p)):(0,r.kq)("",!0),31==t?((0,r.wg)(),(0,r.iD)("br",c)):(0,r.kq)("",!0)])))),256)),b,(0,r.wy)((0,r._)("input",{style:{width:"5em"},"onUpdate:modelValue":a[0]||(a[0]=a=>e.value=a)},null,512),[[i.nr,e.value]])]),g,(0,r.Wm)(t)],64)}]])}}]);