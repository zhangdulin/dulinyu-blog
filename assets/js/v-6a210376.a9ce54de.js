"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9995],{802:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-6a210376",path:"/arithmetic/recursion/%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"题目",slug:"题目",children:[]},{level:3,title:"基本思路",slug:"基本思路",children:[]},{level:3,title:"代码",slug:"代码",children:[]}],filePathRelative:"arithmetic/recursion/变态跳台阶.md",git:{updatedTime:1639623583e3,contributors:[]}}},9331:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级……它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="基本思路" tabindex="-1"><a class="header-anchor" href="#基本思路" aria-hidden="true">#</a> 基本思路</h3><p>每个台阶都可以选择跳或者不跳，最后一个台阶必跳。</p><p>每个台阶有两种选择，n 个台阶有 2 的 n 次方种选择。</p><p>所以一共有 2 的 n-1 次跳法。</p><p>使用位运算</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">--</span>number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>左移运算符（&lt;&lt;）</p></blockquote><p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补 0）。</p><p>设 a=1010 1110，a = a&lt;&lt; 2 将 a 的二进制位左移 2 位、右补 0，即得 a=1011 1000。</p><p>若左移时舍弃的高位不包含 1，则每左移一位，相当于该数乘以 2。</p><blockquote><p>右移运算符（&gt;&gt;）</p></blockquote><p>定义：将一个数的各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃。</p><p>例如：a=a&gt;&gt;2 将 a 的二进制位右移 2 位，左补 0 或者 左补 1 得看被移数是正还是负。</p><p>操作数每右移一位，相当于该数除以 2。</p>',18),p={},t=(0,s(3744).Z)(p,[["render",function(n,a){return e}]])}}]);