"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8323],{3627:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-31f9b3f6",path:"/arithmetic/recursion/%E8%B7%B3%E5%8F%B0%E9%98%B6.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"题目",slug:"题目",children:[]},{level:3,title:"基本思路",slug:"基本思路",children:[]}],filePathRelative:"arithmetic/recursion/跳台阶.md",git:{updatedTime:1639623583e3,contributors:[]}}},2761:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h3 id="基本思路" tabindex="-1"><a class="header-anchor" href="#基本思路" aria-hidden="true">#</a> 基本思路</h3><p>找规律：</p><p>跳三级台阶等于跳两级台阶的跳法+跳一级台阶的跳法。</p><p>跳四级台阶等于跳三级台阶的跳法+跳二级台阶的跳法。</p><p>明显也符合斐波那契数列的规律</p><blockquote><p>f(n) = f(n-1) + f(n-2)</p></blockquote><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> n<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tresult <span class="token operator">=</span> pre <span class="token operator">+</span> current<span class="token punctuation">;</span>\n\t\tpre <span class="token operator">=</span> current<span class="token punctuation">;</span>\n\t\tcurrent <span class="token operator">=</span> result<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',10),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])}}]);