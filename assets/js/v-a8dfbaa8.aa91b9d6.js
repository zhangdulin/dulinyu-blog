"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5523],{5529:(t,e,a)=>{a.r(e),a.d(e,{data:()=>i});const i={key:"v-a8dfbaa8",path:"/javaScript/wx/editor-html/index-js.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"javaScript/wx/editor-html/index-js.md",git:{updatedTime:1663811863e3,contributors:[]}}},8094:(t,e,a)=>{a.r(e),a.d(e,{default:()=>r});const i=(0,a(6252).uE)("<p>// components/editor-html/index.js /*</p><ul><li>@Author: zhangyu</li><li>@Email: zhangdulin@outlook.com</li><li>@Date: 2022-09-14 10:57:58</li><li>@LastEditors: zhangyu</li><li>@LastEditTime: 2022-09-16 09:42:45</li><li>@Description: */</li></ul><p>const { uploadMaterial } = require(&#39;../../utils/services/material&#39;); Component({ /**</p><ul><li>组件的属性列表 */ properties: { /**是否显示工具栏 */ showTabBar: { type: &#39;Boolean&#39;, value: true }, height: { type: &#39;String&#39;, value: &#39;200rpx&#39; },<br> placeholder: { type: &#39;String&#39;, value: &#39;请输入相关内容&#39; }, name: { type: &#39;String&#39;, value: &#39;&#39; }, uploadImageURL: { type: &#39;String&#39;, value: &#39;&#39; }, // 修改时显示内容 richTextContents: { type: String, value: &quot;&quot;, }, // 编辑的富文本的索引 index: { type: Number, value: 0, }, // 默认内容 defaultContent: { type: String, value: &quot;&quot;, observer(val) { val &amp;&amp; this.initData() // 当visible变为true的时候 会触发initData } }, },</li></ul><p>observers: { visible(val) { console.log(val) // 这里会一直监听着的 } },</p><p>/**</p><ul><li>组件的初始数据 */ data: { formats:&#39;&#39; },</li></ul><p>/**</p><ul><li><p>组件的方法列表 */ methods: { initData() { wx.nextTick(() =&gt; { setTimeout(()=&gt;{ this.properties.defaultContent &amp;&amp; this.setContents(this.properties.defaultContent); //设置富文本内容 },1500) }) }, // 编辑器初始化完成时触发 _onEditorReady: function () { const that = this; // 通知父组件 that.triggerEvent(&#39;onEditorReady&#39;); that.createSelectorQuery().select(&#39;#editor&#39;).context(function (res) { that.editorCtx = res.context // if (wx. (&quot;content&quot;)) { // 设置~历史值 // that.editorCtx.insertText(wx.getStorageSync(&quot;content&quot;)) // 注意：插入的是对象 // } // that.properties.defaultContent &amp;&amp; that.setContents(that.properties.defaultContent); //设置富文本内容 }).exec() }, // 设置富文本内容 setContents(rechtext) { this.editorCtx.setContents({ html: rechtext, success: (res) =&gt; { // 富文本内容设置成功 // console.log(&quot;[setContents success]&quot;, res); }, }); }, //监控输入 富文本编辑器输入时，获取值 _onInputting(e) { let html = e.detail.html; let text = e.detail.text; this.triggerEvent(&quot;getEditorValue&quot;, { html: html, text: text }); wx.setStorageSync(&quot;content&quot;, html); // 缓存本地 }, // 工具栏选项选中，图标出现选中样式 _onStatusChange(e) { let self = this; self.setData({ formats: e.detail, }); }, //插入图片 van-upload afterRead(event) { const { file } = event.detail; wx.showLoading({ title: &#39;上传中&#39;, mask: true }); uploadMaterial(file).then(res =&gt; { wx.hideLoading() try { const { data } = res; this.editorCtx.insertImage({ src: data.fullPath }); } catch (error) { wx.showToast({ title: &#39;图片上传失败&#39;, icon: &#39;none&#39; }) } }) }, //插入图片 _addImage: function (event) { let _this = this; wx.chooseImage({ count: 1, sizeType: [&#39;compressed&#39;], sourceType: [&#39;album&#39;], success: function (res) { // wx.showLoading({ // title: &#39;上传中&#39;, // mask: true // });</p><p>// _this._uploadImage(res.tempFilePaths[0], event.currentTarget.dataset.uploadimageurl); } }); }, // _uploadImage: function (tempFilePath, uploadImageURL) { // let _this = this; // wx.uploadFile({ // filePath: tempFilePath, // name: &#39;image&#39;, // url: uploadImageURL, // success: function (res) { // res = JSON.parse(res.data); // wx.hideLoading({ // success: () =&gt; { // if (res.code === 200) { // _this.editorCtx.insertImage({ // src: res.data // }); // } else { // wx.showToast({ // icon: &#39;error&#39;, // title: &#39;服务器错误,稍后重试！&#39;, // mask: true // }) // } // }, // }); // } // }); // }, //设置斜体 _addItalic: function () { this.editorCtx.format(&quot;italic&quot;) }, //添加粗体样式 _addBold: function () { this.editorCtx.format(&quot;bold&quot;) }, //设置标题 _addHeader: function (e) { let headerType = e.currentTarget.dataset.header; this.editorCtx.format(&quot;header&quot;, headerType) }, //设置文字的排列方式 _addAlign: function (e) { let alignType = e.currentTarget.dataset.align; this.editorCtx.format(&quot;align&quot;, alignType); }, //设置列表 _addList: function (e) { let listType = e.currentTarget.dataset.list; this.editorCtx.format(&quot;list&quot;, listType); }, //撤销 _undo: function () { this.editorCtx.undo(); }, // 清空所有 clear() { this.editorCtx.clear({ success: function(res) { console.log(&quot;清空成功&quot;) } }) }, // 清除样式 removeFormat() { this.editorCtx.removeFormat() }, // 记录样式 点击工具栏格式化编辑文本 format(e) { let { name, value } = e.target.dataset if (!name) return // 富文本编辑器格式化内容方法 this.editorCtx.format(name, value) }, } })</p></li></ul>",9),o={},r=(0,a(3744).Z)(o,[["render",function(t,e){return i}]])}}]);