(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9427],{1205:(a,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>t});const t={key:"v-10df0317",path:"/javaScript/learn/list/p5.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"重学javaScript词法，类型",slug:"重学javascript词法-类型",children:[{level:3,title:"A Grammar Summary",slug:"a-grammar-summary",children:[]},{level:3,title:"InputElement",slug:"inputelement",children:[]}]}],filePathRelative:"javaScript/learn/list/p5.md",git:{updatedTime:1660727839e3,contributors:[{name:"zhangdulin",email:"zhangdulin@outlook.com",commits:2},{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},9156:(a,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>r});var t=s(6252);const e=(0,t.uE)('<h2 id="重学javascript词法-类型" tabindex="-1"><a class="header-anchor" href="#重学javascript词法-类型" aria-hidden="true">#</a> 重学javaScript词法，类型</h2><p>原子 Atom: Identifier Literal</p><p>表达式 Expression: Atome Operator Punctuator</p><p>语句 Statement: Expression Keyword Punctuator</p><p>结构化 Structure: Function Class Process Namespace</p><p>程序集 Program: Program Module Package Library</p><h3 id="a-grammar-summary" tabindex="-1"><a class="header-anchor" href="#a-grammar-summary" aria-hidden="true">#</a> A Grammar Summary</h3><p>SourceCharacter :: any Unicode code point</p><p>unicode: https://home.unicode.org/ fileformat: https://www.fileformat.info/</p><p>for(let i=0;i&lt;128;i++&gt;) { console.log(String.fromCharCode(i)) }</p><p>String.formCodePoint .codePointAt &#39;1&#39;.codePointAt(0).toString(16)</p><h3 id="inputelement" tabindex="-1"><a class="header-anchor" href="#inputelement" aria-hidden="true">#</a> InputElement</h3><p>WhiteSpace 空格 LineTerminator 换行 Comment 注释 CommonToken token 有意思的输入 DivPunctuator RightBracePunctuator</p><h4 id="whitespace" tabindex="-1"><a class="header-anchor" href="#whitespace" aria-hidden="true">#</a> WhiteSpace</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token constant">TAB</span><span class="token operator">&gt;</span> tab 制表符\n<span class="token operator">&lt;</span><span class="token constant">VT</span><span class="token operator">&gt;</span> <span class="token number">11</span> 纵向制表符 <span class="token string">&quot;\\v&quot;</span>\n<span class="token operator">&lt;</span><span class="token constant">FF</span><span class="token operator">&gt;</span> <span class="token number">10</span> \n<span class="token operator">&lt;</span><span class="token constant">SP</span><span class="token operator">&gt;</span> <span class="token number">32</span> 普通空格\n<span class="token operator">&lt;</span><span class="token constant">NBSP</span><span class="token operator">&gt;</span> <span class="token constant">U</span> <span class="token operator">+</span> <span class="token number">00</span>A0 空格 <span class="token constant">NO</span><span class="token operator">-</span><span class="token constant">BREAK</span> <span class="token constant">SPACE</span> 主要处理排版 使之连接不断\n<span class="token operator">&lt;</span><span class="token constant">ZWNBSP</span><span class="token operator">&gt;</span> <span class="token constant">ZERO</span> <span class="token constant">WIDTH</span> <span class="token constant">NO</span><span class="token operator">-</span><span class="token constant">BREAK</span> <span class="token constant">SPACE</span>\n<span class="token operator">&lt;</span><span class="token constant">USP</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="lineterminator" tabindex="-1"><a class="header-anchor" href="#lineterminator" aria-hidden="true">#</a> LineTerminator</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token constant">LF</span><span class="token operator">&gt;</span> <span class="token constant">U</span><span class="token operator">+</span><span class="token number">000</span>A\n<span class="token operator">&lt;</span><span class="token constant">CR</span><span class="token operator">&gt;</span> <span class="token constant">U</span><span class="token operator">+</span><span class="token number">000</span>D\n<span class="token operator">&lt;</span><span class="token constant">LS</span><span class="token operator">&gt;</span> <span class="token constant">U</span><span class="token operator">+</span><span class="token number">2028</span>     <span class="token constant">LINE</span> <span class="token constant">SEPARATOR</span>\n<span class="token operator">&lt;</span><span class="token constant">PS</span><span class="token operator">&gt;</span> <span class="token constant">U</span><span class="token operator">+</span><span class="token number">2029</span>  <span class="token constant">PARAGRAPH</span> <span class="token constant">SEPARATOR</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="token" tabindex="-1"><a class="header-anchor" href="#token" aria-hidden="true">#</a> token</h4><p>IdentifierName 标识符:变量a， document等 关键字：for let Identifier Keywords Future reserved Keywords 将来会用 例如：enum PrivateIdentifier Punctuator 符号：&lt; &gt; () Literal Number String Boolean Object Null undefined Symbol NumericLiteral StringLiteral Template</p><h4 id="literal" tabindex="-1"><a class="header-anchor" href="#literal" aria-hidden="true">#</a> Literal</h4><h5 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h5><p><img src="/dulinyu-blog/learn/Dingtalk_20220721152401.png" alt="Number!" title="Number"></p><p>var a = 0.1 var b = 0.2</p><p>const intarray = new Uint8Array(8); const memory = new Float64Array(intarray.buffer); intarray[0] = 0b00000000 intarray[1] = 0b00000100</p><p>for (let i =0; i&lt;8; i++&gt;) { let s = (intarray[i].toString(2)) console.log(s) } console.log(memory) console.log(intarray)</p><p>Number grammar <img src="/dulinyu-blog/learn/Dingtalk_20220721163252.png" alt="grammar!" title="grammar"></p><p>0b八进制 0x 16进制</p><p>paseInt(&#39;10&#39;, 2)</p><p>Number Practice <img src="/dulinyu-blog/learn/Dingtalk_20220721163941.png" alt="Practice!" title="Practice"></p><h5 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h5><p><img src="/dulinyu-blog/learn/Dingtalk_20220721164351.png" alt="String!" title="String"></p><p>97 .toString(2) 带空格是使 97 编程字符 1100001</p><p>字符集 . ASCLL . Unicode . UCS U+0000-U+FFFF . GB 国标 .GB2312 .GBK(GB13000) .GB18030 . ISO-8859 . BIG5</p><p>Encoding UTF <img src="/dulinyu-blog/learn/Dingtalk_20220721164933.png" alt="UTF!" title="UTF"></p><p>function UTF8_Encoding(string) { return new Buffer }</p><p>Grammer &quot;abc&quot; &#39;abc&#39; <code>abc</code><br> &quot;\\x10&quot; &quot;\\u1000&quot; &quot;\\&quot; &quot;\\b&quot; (f,n,r,t,v)</p><p><img src="/dulinyu-blog/learn/Dingtalk_20220721165932.png" alt="String Grammer!" title="String Grammer"></p>',37),r={render:function(a,n){const s=(0,t.up)("Gitalk");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,(0,t.Wm)(s)],64)}}}}]);