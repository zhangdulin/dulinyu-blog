(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3700],{5750:(e,t,a)=>{"use strict";a.r(t),a.d(t,{data:()=>r});const r={key:"v-1448b455",path:"/javaScript/learn/list/p7.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"重学javaScript语句 对象",slug:"重学javascript语句-对象",children:[{level:3,title:"block",slug:"block",children:[]},{level:3,title:"Completion Record",slug:"completion-record",children:[]},{level:3,title:"简单语句",slug:"简单语句",children:[]},{level:3,title:"Iteration",slug:"iteration",children:[]},{level:3,title:"标签，循环，break,continue",slug:"标签-循环-break-continue",children:[]},{level:3,title:"try",slug:"try",children:[]},{level:3,title:"声明",slug:"声明",children:[]},{level:3,title:"object 面向对象",slug:"object-面向对象",children:[]}]}],filePathRelative:"javaScript/learn/list/p7.md",git:{updatedTime:1659695787e3,contributors:[{name:"zhangdulin",email:"zhangdulin@outlook.com",commits:2}]}}},9561:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var r=a(6252);const n=(0,r.uE)('<h2 id="重学javascript语句-对象" tabindex="-1"><a class="header-anchor" href="#重学javascript语句-对象" aria-hidden="true">#</a> 重学javaScript语句 对象</h2><h3 id="block" tabindex="-1"><a class="header-anchor" href="#block" aria-hidden="true">#</a> block</h3><p>BlockStatement { ... }</p><h3 id="completion-record" tabindex="-1"><a class="header-anchor" href="#completion-record" aria-hidden="true">#</a> Completion Record</h3><p>[[type]]:normal,break,continue,return,or throw [[value]]: Types [[target]]:label</p><p>normal 语句：const let 非normal语句： return</p><h3 id="简单语句" tabindex="-1"><a class="header-anchor" href="#简单语句" aria-hidden="true">#</a> 简单语句</h3><p>ExpressionStatement EmptyStatement DebuggerStatement throwStatement ContinueStatement BreakStatement ReturnStatement</p><h3 id="iteration" tabindex="-1"><a class="header-anchor" href="#iteration" aria-hidden="true">#</a> Iteration</h3><p>while ; do while ; for ;for in; for of: 任何可以迭代的都可以用; var; const/let ;in; for await</p><h3 id="标签-循环-break-continue" tabindex="-1"><a class="header-anchor" href="#标签-循环-break-continue" aria-hidden="true">#</a> 标签，循环，break,continue</h3><p>LabelledStatement IterationStatement ContinueStatement BreakStatement SwitchStatement [[type]]:break,contunue [[value]]: -- [[target]]:label</p><h3 id="try" tabindex="-1"><a class="header-anchor" href="#try" aria-hidden="true">#</a> try</h3><p>try {</p><p>} catch(e){</p><p>}finally {</p><p>}</p><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><p>FunctionDeclaration GenaratorDeclaration AsyncFunctionDeclaration AsyncGenaratorDeclaration VariableDeclaration ClassDeclaration LexicalDeclaration</p><p>function* foo() { yield 1 var i =2 while (true) { yeild i++ } } foo.next()</p><p>function sleep(t) { return new Promise(resolve=&gt;setTimeout(resolve, t)) } void async function() { var 1= 0 while(true) { i++ await sleep(1000) } }()</p><p>实现无限数字 async function* foo() { var 1= 0 while(true) { i++ await sleep(1000) } } void async function() { var g = foo() for await (let e of g) { console.log(e) } }()</p><h3 id="object-面向对象" tabindex="-1"><a class="header-anchor" href="#object-面向对象" aria-hidden="true">#</a> object 面向对象</h3><p>我们不应该收到语言描述的干扰 在设计对象的状态和行为时，我们总是遵循“行为改变状态”的原则</p><p>在js中运行时，我们只关心原型和属性</p><p><img src="/dulinyu-blog/learn/Dingtalk_20220804173412.png" alt="object!" title="object"></p><p>object api {} . Object.defineProperty Object.create Object.setPrototypeOf Object.getPrototypeOf new classs extends new function prototype</p>',27),i={render:function(e,t){const a=(0,r.up)("Gitalk");return(0,r.wg)(),(0,r.j4)(r.HY,null,[n,(0,r.Wm)(a)],64)}}}}]);