(self.webpackChunkblog=self.webpackChunkblog||[]).push([[522],{6770:(n,a,e)=>{"use strict";e.r(a),e.d(a,{data:()=>s});const s={key:"v-19908aec",path:"/arithmetic/find/array.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"题目",slug:"题目",children:[]},{level:3,title:"基本思路",slug:"基本思路",children:[]},{level:3,title:"代码思路",slug:"代码思路",children:[]},{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"拓展：二分查找",slug:"拓展-二分查找",children:[]},{level:3,title:"考察点",slug:"考察点",children:[]}],filePathRelative:"arithmetic/find/array.md",git:{updatedTime:1625219228e3,contributors:[{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},3077:(n,a,e)=>{"use strict";e.r(a),e.d(a,{default:()=>l});var s=e(6252);const r=(0,s.uE)('<h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="基本思路" tabindex="-1"><a class="header-anchor" href="#基本思路" aria-hidden="true">#</a> 基本思路</h3><p>二维数组是有序的，比如下面的数据：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1 2 3\n4 5 6\n7 8 9\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以直接利用左下角数字开始查找：</p><p>大于：比较上移</p><p>小于：比较右移</p><h3 id="代码思路" tabindex="-1"><a class="header-anchor" href="#代码思路" aria-hidden="true">#</a> 代码思路</h3><p>将二维数组看作平面坐标系</p><p>从左下角（0,arr.length-1）开始比较：</p><p>目标值大于坐标值---x 坐标+1</p><p>目标值小于坐标值---y 坐标-1</p><p>注意：</p><p>二维数组 arr[i][j]中</p><p>j 代表 x 坐标</p><p>i 代表 y 坐标</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function Find(target, array) {\nlet i = array.length - 1; // y 坐标\nlet j = 0; // x 坐标\nreturn compare(target, array, i, j);\n}\n\n    function compare(target, array, i, j) {\n      if (array[i] === undefined || array[i][j] === undefined) {\n        return false;\n      }\n      const temp = array[i][j];\n      if (target === temp) {\n        return true;\n      }\n      else if (target &gt; temp) {\n        return compare(target, array, i, j+1);\n      }\n      else if (target &lt; temp) {\n        return compare(target, array, i-1, j);\n      }\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="拓展-二分查找" tabindex="-1"><a class="header-anchor" href="#拓展-二分查找" aria-hidden="true">#</a> 拓展：二分查找</h3><p>二分查找的条件是必须有序。</p><p>和线性表的中点值进行比较，如果小就继续在小的序列中查找，如此递归直到找到相同的值。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n    function binarySearch(data, arr, start, end) {\n        if (start &gt; end) {\n            return -1;\n        }\n        var mid = Math.floor((end + start) / 2);\n        if (data == arr[mid]) {\n            return mid;\n        } else if (data &lt; arr[mid]) {\n            return binarySearch(data, arr, start, mid - 1);\n        } else {\n            return binarySearch(data, arr, mid + 1, end);\n        }\n    }\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="考察点" tabindex="-1"><a class="header-anchor" href="#考察点" aria-hidden="true">#</a> 考察点</h3><p>查找 数组</p>',25),l={render:function(n,a){const e=(0,s.up)("Gitalk");return(0,s.wg)(),(0,s.j4)(s.HY,null,[r,(0,s.Wm)(e)],64)}}}}]);