(self.webpackChunkblog=self.webpackChunkblog||[]).push([[899],{4345:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-17f7a0d3",path:"/arithmetic/huisu/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"二叉树中和为某一值的路径",slug:"二叉树中和为某一值的路径",children:[]},{level:3,title:"思路",slug:"思路",children:[]},{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"考察点",slug:"考察点",children:[]}],filePathRelative:"arithmetic/huisu/二叉树中和为某一值的路径.md",git:{updatedTime:1639623583e3,contributors:[{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},5233:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});var p=a(6252);const t=(0,p.uE)('<h3 id="二叉树中和为某一值的路径" tabindex="-1"><a class="header-anchor" href="#二叉树中和为某一值的路径" aria-hidden="true">#</a> 二叉树中和为某一值的路径</h3><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>套用回溯算法的思路</p><p>设定一个结果数组 result 来存储所有符合条件的路径</p><p>设定一个栈 stack 来存储当前路径中的节点</p><p>设定一个和 sum 来标识当前路径之和</p><p>从根结点开始深度优先遍历，每经过一个节点，将节点入栈</p><p>到达叶子节点，且当前路径之和等于给定目标值，则找到一个可行的解决方案，将其加入结果数组</p><p>遍历到二叉树的某个节点时有 2 个可能的选项，选择前往左子树或右子树</p><p>若存在左子树，继续向左子树递归</p><p>若存在右子树，继续向右子树递归</p><p>若上述条件均不满足，或已经遍历过，将当前节点出栈，向上回溯</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">FindPath</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> expectNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">FindPathCore</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">FindPathCore</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tsum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> sum <span class="token operator">===</span> expectNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tresult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">FindPathCore</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">FindPathCore</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\tstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="考察点" tabindex="-1"><a class="header-anchor" href="#考察点" aria-hidden="true">#</a> 考察点</h3><p>二叉树 回溯算法</p>',17),e={render:function(n,s){const a=(0,p.up)("Gitalk");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)(a)],64)}}}}]);