(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4506],{134:(l,e,n)=>{"use strict";n.r(e),n.d(e,{data:()=>t});const t={key:"v-4a414639",path:"/arithmetic/recursion/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概念",slug:"概念",children:[{level:3,title:"重复计算",slug:"重复计算",children:[]}]}],filePathRelative:"arithmetic/recursion/index.md",git:{updatedTime:1667996632e3,contributors:[{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:2}]}}},7160:(l,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>b});var t=n(6252);const i=n.p+"assets/img/fJgzFyM6WvXGOi7.279160e9.png",u=n.p+"assets/img/fA3okFVIMlxS1Q6.ad511f05.jpg",a=(0,t.Wm)("h2",{id:"概念",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),(0,t.Uk)(" 概念")],-1),m=(0,t.Wm)("p",null,"递归是一种解决问题的有效方法，在递归过程中，函数将自身作为子例程调用。",-1),r=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:i,alt:"递归",title:"递归"})],-1),s=(0,t.Wm)("p",null,"你可能想知道如何实现调用自身的函数。诀窍在于，每当递归函数调用自身时，它都会将给定的问题拆解为子问题。递归调用继续进行，直到到子问题无需进一步递归就可以解决的地步。",-1),W=(0,t.Wm)("p",null,"为了确保递归函数不会导致无限循环，它应具有以下属性：",-1),c=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"一个简单的基本案例 —— 能够不使用递归来产生答案的终止方案。"),(0,t.Wm)("li",null,"一组规则，也称作递推关系，可将所有其他情况拆分到基本案例。")],-1),d=(0,t.Wm)("h3",{id:"重复计算",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#重复计算","aria-hidden":"true"},"#"),(0,t.Uk)(" 重复计算")],-1),h=(0,t.Wm)("p",null,"一些问题使用递归考虑，思路是非常清晰的，但是却不推荐使用递归，例如下面的几个问题：",-1),p=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"斐波拉契数列"),(0,t.Wm)("li",null,"跳台阶"),(0,t.Wm)("li",null,"矩形覆盖"),(0,t.Wm)("li",null,"这几个问题使用递归都有一个共同的缺点，那就是包含大量的重复计算，如果递归层次比较深的话，直接会导致 JS 进程崩溃。")],-1),o=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:u,alt:"递归",title:"递归"})],-1),g=(0,t.Wm)("p",null,"你可以使用记忆化的方法来避免重复计算，即开辟一个额外空间来存储已经计算过的值，但是这样又会浪费一定的内存空间。因此上面的问题一般会使用动态规划求解。",-1),f=(0,t.Wm)("blockquote",null,[(0,t.Wm)("p",null,"所以，在使用递归之前，一定要判断代码是否含有重复计算，如果有的话，不推荐使用递归。")],-1),k=(0,t.Wm)("p",null,"递归是一种思想，而非一个类型，很多经典算法都是以递归为基础，因此这里就不再给出更多问题。",-1),b={render:function(l,e){return(0,t.wg)(),(0,t.j4)(t.HY,null,[a,m,r,s,W,c,d,h,p,o,g,f,k],64)}}}}]);