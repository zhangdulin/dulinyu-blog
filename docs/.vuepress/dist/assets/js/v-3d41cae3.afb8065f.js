(self.webpackChunkblog=self.webpackChunkblog||[]).push([[820],{2871:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-3d41cae3",path:"/arithmetic/huisu/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84..html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"题目",slug:"题目",children:[]},{level:3,title:"思路",slug:"思路",children:[]},{level:3,title:"代码",slug:"代码",children:[]},{level:3,title:"考察点",slug:"考察点",children:[]}],filePathRelative:"arithmetic/huisu/矩阵中的路径..md",git:{updatedTime:1639623583e3,contributors:[{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},3293:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});var p=a(6252);const t=(0,p.uE)('<h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p><p>路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。 如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。</p><p>例如 a b c e s f c s a d e e 这样的 3 X 4 矩阵中包含一条字符串&quot;bcced&quot;的路径，但是矩阵中不包含&quot;abcb&quot;路径，因为字符串的第一个字符 b 占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>a b c e\ns f c s\na d e e\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>回溯算法 问题由多个步骤组成，并且每个步骤都有多个选项。</p><p>依次验证 path 中的每个字符（多个步骤），每个字符可能出现在多个方向（多个选项）</p><ol><li>根据给定的行列，遍历字符，根据行列数计算出字符位置</li><li>判断当前字符是否满足递归终止条件</li><li>递归终止条件：(1).行列越界 (2).与路径不匹配 (3).已经走过(需设定一个数组标识当前字符是否走过)</li><li>若路径中的字符最后一位匹配成功，则到达边界且满足约束条件，找到合适的解</li><li>递归不断寻找四个方向是否满足条件，满足条件再忘更深层递归，不满足向上回溯</li><li>如果回溯到最外层，则当前字符匹配失败，将当前字符标记为未走</li></ol><p><img src="/dulinyu-blog/arithmetic/juzheng.png" alt="矩阵中的路径.!" title="矩阵中的路径."></p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>记录一个当前排列字符 temp</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">hasPathCore</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> index <span class="token operator">=</span> i <span class="token operator">*</span> cols <span class="token operator">+</span> j<span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>\n\t\ti <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>\n\t\tj <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>\n\t\ti <span class="token operator">&gt;=</span> rows <span class="token operator">||</span>\n\t\tj <span class="token operator">&gt;=</span> cols <span class="token operator">||</span>\n\t\tmatrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span>\n\t\tflag<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n\t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\tflag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>\n\t\t<span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\t<span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\t<span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\t<span class="token function">hasPathCore</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> path<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\tflag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="考察点" tabindex="-1"><a class="header-anchor" href="#考察点" aria-hidden="true">#</a> 考察点</h3><ul><li>回溯算法</li><li>二维数组</li></ul>',15),e={render:function(n,s){const a=(0,p.up)("Gitalk");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)(a)],64)}}}}]);