(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9186],{2080:(s,a,n)=>{"use strict";n.r(a),n.d(a,{data:()=>p});const p={key:"v-0f2a2a78",path:"/javaScript/learn/list/p4.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"编程语言通识与javascript语言设计",slug:"编程语言通识与javascript语言设计",children:[]}],filePathRelative:"javaScript/learn/list/p4.md",git:{updatedTime:1660727839e3,contributors:[{name:"zhangdulin",email:"zhangdulin@outlook.com",commits:1},{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},944:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});var p=n(6252);const e=(0,p.uE)('<h2 id="编程语言通识与javascript语言设计" tabindex="-1"><a class="header-anchor" href="#编程语言通识与javascript语言设计" aria-hidden="true">#</a> 编程语言通识与javascript语言设计</h2><h4 id="语言按照语法分类" tabindex="-1"><a class="header-anchor" href="#语言按照语法分类" aria-hidden="true">#</a> 语言按照语法分类</h4><p>. 非形式语言 . 中文，英文 . 形式语言（乔姆斯基普系） . 0行 无限制文法 . 1行 上下文相关文法 . 2行 上下文无关文法 . 3行 正则文法</p><h4 id="产生式-bnf" tabindex="-1"><a class="header-anchor" href="#产生式-bnf" aria-hidden="true">#</a> 产生式（BNF）</h4><p>. 用尖括号括起来的名称来表示语法结构名 . 语法结构分成基础结构和需要用其他语法结构定义的复合结构 . 基础结构称终结符 . 复合结构称非终结符 . 引号和中间的字符表示终结符 . 可以有括号 . *表示重复多次 . |表示或 . +表示至少一次</p><p>四则运算： . 1+2*3 终结符： . Number . + - * / 非终结符： MultiplicativeExpression</p><p>例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">|</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token string">&quot;9&quot;</span>\n<span class="token operator">&lt;</span>DecimaNumber<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">|</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Number<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>DecimaNumber<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0|[1-9][0-9]*</span><span class="token regex-delimiter">/</span></span>\n\n\n<span class="token operator">&lt;</span>PrimaryExpression<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>DecimaNumber<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">&lt;</span>LogicalExpression<span class="token operator">&gt;</span>  <span class="token string">&quot;)&quot;</span>\n<span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>PrimaryExpression<span class="token operator">&gt;</span>  <span class="token operator">|</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">&lt;</span>PrimaryExpression<span class="token operator">&gt;</span>  <span class="token operator">|</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">&lt;</span>PrimaryExpression<span class="token operator">&gt;</span>  \n\n<span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>LogicalExpression<span class="token operator">&gt;</span>  <span class="token operator">=</span>  <span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span>  <span class="token operator">|</span>  <span class="token operator">&lt;</span>LogicalExpression<span class="token operator">&gt;</span>  <span class="token string">&quot;||&quot;</span>  <span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span> <span class="token operator">|</span>\n <span class="token operator">&lt;</span>LogicalExpression<span class="token operator">&gt;</span>  <span class="token string">&quot;&amp;&amp;&quot;</span>  <span class="token operator">&lt;</span>AddtiveExpression<span class="token operator">&gt;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="通过产生式理解乔姆斯基普系" tabindex="-1"><a class="header-anchor" href="#通过产生式理解乔姆斯基普系" aria-hidden="true">#</a> 通过产生式理解乔姆斯基普系</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span> <span class="token number">0</span>形 无限制文法\n<span class="token operator">?</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">=</span><span class="token operator">?</span>\n<span class="token number">2.</span> <span class="token number">1</span>行 上下文相关文法\n<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">=</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span><span class="token operator">?</span>\n\n<span class="token number">3.</span> <span class="token number">2</span>行 上下文无关文法 \n<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">=</span><span class="token operator">?</span>\n\n<span class="token number">4.</span> <span class="token number">3</span>行 正则文法 \n<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token operator">?</span>\n<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">=</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span>错误\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="现代预言的特例" tabindex="-1"><a class="header-anchor" href="#现代预言的特例" aria-hidden="true">#</a> 现代预言的特例</h4><p>c++中 * 可能表示乘号或者指针，具体是什么，取决于星号前面的表示符是否被声明为类型 vb中，&lt; 可能是小于号，也可能是xml直接量的开始，取决于当前位置是否可以接受xml直接量 pythone中，行首的tab符和空格会根据上一行的行首空白以一定的规则被处理称虚拟终结符indent或者dedent javascript中，/可能是除号，也可能是正则表达式开头，出路方式类似于vb，字符串模板中也需要特殊出路}，还有自动插入分号规则</p><h4 id="图灵完备性" tabindex="-1"><a class="header-anchor" href="#图灵完备性" aria-hidden="true">#</a> 图灵完备性</h4><p>命令式：图灵机 goto if和while</p><p>声明式：lamnda 递归</p><h4 id="动态和静态" tabindex="-1"><a class="header-anchor" href="#动态和静态" aria-hidden="true">#</a> 动态和静态</h4><p>动态： 在用户的设备，在线服务器上 产品实际运行时 runtime</p><p>静态： 在程序员的设备上 产品开发时 compiletime</p><h4 id="类型系统" tabindex="-1"><a class="header-anchor" href="#类型系统" aria-hidden="true">#</a> 类型系统</h4><p>动态类型系统与静态类型系统</p><p>强类型与弱类型 String+ Number String == Boolean</p><p>复合类型 结构体 函数签名</p><p>子类型 逆变/协变</p><h4 id="一般命令式编程语言" tabindex="-1"><a class="header-anchor" href="#一般命令式编程语言" aria-hidden="true">#</a> 一般命令式编程语言</h4><p>原子 Atom: Identifier Literal</p><p>表达式 Expression: Atome Operator Punctuator</p><p>语句 Statement: Expression Keyword Punctuator</p><p>结构化 Structure: Function Class Process Namespace</p><p>程序集 Program: Program Module Package Library</p><h4 id="语法-语义-运行时" tabindex="-1"><a class="header-anchor" href="#语法-语义-运行时" aria-hidden="true">#</a> 语法+语义=&gt;运行时</h4>',30),t={render:function(s,a){const n=(0,p.up)("Gitalk");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)(n)],64)}}}}]);