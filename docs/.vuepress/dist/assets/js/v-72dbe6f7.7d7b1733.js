(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4878],{9346:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-72dbe6f7",path:"/arithmetic/fenzhi/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"数组中的逆序对",slug:"数组中的逆序对",children:[]},{level:3,title:"思路",slug:"思路",children:[]},{level:3,title:"代码",slug:"代码",children:[]}],filePathRelative:"arithmetic/fenzhi/index.md",git:{updatedTime:1639623583e3,contributors:[{name:"zhangyu2207",email:"zhangyu2207@yundasys.com",commits:1}]}}},9177:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});var p=a(6252);const t=(0,p.uE)('<h3 id="数组中的逆序对" tabindex="-1"><a class="header-anchor" href="#数组中的逆序对" aria-hidden="true">#</a> 数组中的逆序对</h3><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数 P。</p><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>使用暴力法：从第一个数开始，依次和后面每一个数字进行比较记录逆序对的个数，时间复杂度 O(n2)</p><p>使用分治的细想：</p><p>若没了解过归并排序，建议先熟悉归并排序算法再来看本题。</p><p>直接将归并排序进行改进，把数据分成 N 个小数组。</p><p>合并数组 left - mid , mid+1 - right，合并时， 若 array[leftIndex] &gt; array[rightIndex] ,则比右边 rightIndex-mid 个数大</p><p>count += rightIndex-mid</p><p>注意和归并排序的区别： 归并排序是合并数组数从小数开始，而本题是从大数开始。</p><p>时间复杂度 O(nlogn)</p><p>空间复杂度 O(n)</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> l <span class="token operator">+</span> m <span class="token operator">+</span> r<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> leftIndex <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> rightIndex <span class="token operator">=</span> right<span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> tempIndex <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&gt;=</span> left <span class="token operator">&amp;&amp;</span> rightIndex <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tcount <span class="token operator">+=</span> rightIndex <span class="token operator">-</span> mid<span class="token punctuation">;</span>\n\t\t\ttemp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\ttemp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&gt;=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttemp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>rightIndex <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ttemp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\ttempIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',14),e={render:function(n,s){const a=(0,p.up)("Gitalk");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)(a)],64)}}}}]);