(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2364],{91:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-17b26593",path:"/javaScript/learn/list/p9.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"重学javaScript结构化二",slug:"重学javascript结构化二",children:[{level:3,title:"js执行粒度",slug:"js执行粒度",children:[]},{level:3,title:"函数调用",slug:"函数调用",children:[]},{level:3,title:"realm",slug:"realm",children:[]}]}],filePathRelative:"javaScript/learn/list/p9.md",git:{updatedTime:1662985409e3,contributors:[{name:"zhangdulin",email:"zhangdulin@outlook.com",commits:1}]}}},1275:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>l});var e=s(6252);const t=(0,e.uE)('<h2 id="重学javascript结构化二" tabindex="-1"><a class="header-anchor" href="#重学javascript结构化二" aria-hidden="true">#</a> 重学javaScript结构化二</h2><h3 id="js执行粒度" tabindex="-1"><a class="header-anchor" href="#js执行粒度" aria-hidden="true">#</a> js执行粒度</h3><ol start="0"><li>js context=&gt;realm（领域）</li><li>宏任务</li><li>微任务（promise）</li><li>函数调用（execution context）</li><li>语句/声明</li><li>表达式</li><li>直接量/变量/this</li></ol><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h3><p><img src="/dulinyu-blog/learn/Dingtalk_20220804173413.png" alt="函数调用!" title="函数调用"><img src="/dulinyu-blog/learn/Dingtalk_20220912140103.png" alt="execution context!" title="execution context"></p><h4 id="lexicalenvironment" tabindex="-1"><a class="header-anchor" href="#lexicalenvironment" aria-hidden="true">#</a> LexicalEnvironment</h4><p>this new.target super 变量</p><h4 id="variableenvironment" tabindex="-1"><a class="header-anchor" href="#variableenvironment" aria-hidden="true">#</a> VariableEnvironment</h4><p>VariableEnvironment 是个历史遗留的包袱，仅仅用于处理var 声明</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> y <span class="token operator">=</span><span class="token number">2</span>\n    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;var x= 1;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">with</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;var x&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="realm" tabindex="-1"><a class="header-anchor" href="#realm" aria-hidden="true">#</a> realm</h3><p>在js中，函数表达式和对象直接量俊辉创建对象 使用. 做隐式转换也会创建对象 这些对象也是有原型的，如果我们没有realm，就不知道他们的原型是什么</p>',12),l={render:function(n,a){const s=(0,e.up)("Gitalk");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)(s)],64)}}}}]);